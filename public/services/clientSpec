describe("App", function() {
  var api;

  beforeEach(function() {
    api = {
      getCurrentTerm: getCurrentTerm,
      getMostRecentCourseData: getMostRecentCourseData,
      getAllSubjectCodes: getAllSubjectCodes,
      getAllCRNs: getAllCRNs,
      getAllStatuses: getAllStatuses,
      getAllPartOfTerms: getAllPartOfTerms,
      getAllInstructionalMethods: getAllInstructionalMethods,
      getAllCreditHours: getAllCreditHours,
      getAllMeetingDays: getAllMeetingDays,
      getAllCampuses: getAllCampuses,
      getAllSections: getAllSections,
      getAllWaitlist: getAllWaitlist,
      getAllDoNotPublish: getAllDoNotPublish,
      getAllHonors: getAllHonors,
      getAllCancel: getAllCancel,
      getAllSpecialApprovals: getAllSpecialApprovals,
      getAllTimeIntervals: getAllTimeIntervals,
      getAllPrimaryInstructors: getAllPrimaryInstructors,
      getAllSecondaryInstructors: getAllSecondaryInstructors
    };
  });

  it("should have all the subject codes", function() {
    expect(app.getAllSubjectCodes).toEqual(["ACCT", "CS", "DS", "IS", "MATH", "PHYS", "PSYC"]);

    //demonstrates use of custom matcher
    expect(player).toBePlaying(song);
  });

  describe("when song has been paused", function() {
    beforeEach(function() {
      player.play(song);
      player.pause();
    });

    it("should indicate that the song is currently paused", function() {
      expect(player.isPlaying).toBeFalsy();

      // demonstrates use of 'not' with a custom matcher
      expect(player).not.toBePlaying(song);
    });

    it("should be possible to resume", function() {
      player.resume();
      expect(player.isPlaying).toBeTruthy();
      expect(player.currentlyPlayingSong).toEqual(song);
    });
  });

  // demonstrates use of spies to intercept and test method calls
  it("tells the current song if the user has made it a favorite", function() {
    spyOn(song, 'persistFavoriteStatus');

    player.play(song);
    player.makeFavorite();

    expect(song.persistFavoriteStatus).toHaveBeenCalledWith(true);
  });

  //demonstrates use of expected exceptions
  describe("#resume", function() {
    it("should throw an exception if song is already playing", function() {
      player.play(song);

      expect(function() {
        player.resume();
      }).toThrowError("song is already playing");
    });
  });
});
